name: Player Service Docker Image CI

on:
  push:
    branches: [ main ]
    paths-ignore: 
      -  "lts/**"
      -  "cts/**"
  pull_request:
    branches: [ main ]
    paths-ignore: 
      -  "lts/**"
      -  "cts/**"

jobs:

  SSH_TEST:
    environment: pipeline-environment
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: ls -a via OPEN SSH Private Key
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: ls -a; 
          host: ${{ secrets.TEST_ENV_AKA_LRS_EC2 }}
          username: ubuntu
          privateKey: ${{ secrets.EC2_LRS_PEM }}
          args: "-v -t"
      - name: results
        run: sleep 10;


  unit-testing:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      max-parallel: 1
    steps:
    - uses: actions/checkout@v2
    - name: Unit Testing
      run: ls; cd player/service; npm test
    - name: Code Coverage
      run: echo "No code coverage for the CATAPULT player service."
      
  Static-Scanning:
    needs: unit-testing
    environment: pipeline-environment
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        #projectBaseDir: /player
        args: >
          -Dsonar.projectKey=catapult
          -Dsonar.verbose=true
  
  Container-Hardening:
    needs: Static-Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build the container image
      run: docker build ./player --file ./player/Dockerfile --tag player-image:latest
    - uses: anchore/scan-action@v2
      with:
        image: "player-image:latest"
        fail-build: false
        debug: true
        acs-report-enable: true
    - name: grype scan JSON results
      run: cat results.sarif; cat vulnerabilities.json; for j in `ls ./anchore-reports/*.json`; do echo "---- ${j} ----"; cat ${j}; echo; done

  Docker-delivery:
    needs: Container-Hardening
    runs-on: ubuntu-latest
    steps:
    - name: Upload Latest Image To Docker
      run: sleep 20;
          
          
  DAST:
    needs: Docker-delivery
    environment: pipeline-environment
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: ls -a via OPEN SSH Private Key
        uses: fifsky/ssh-action@master
        with:
          command: ls -a; 
         #   cd /DevSecOps-Foundation
         #   ls -a
         #   bash rebuild.sh
         #   exit 1
          host: ${{ secrets.TEST_ENV_AKA_LRS_EC2 }}
          user: ubuntu
          #user: ${{ secrets.EC2_USER }}
          #pass: ${{ secrets.EC2_USER_PASSWORD }}
          key: ${{ secrets.EC2_LRS_PEM }}
          args: "-v"
      - name: results
        run: sleep 10;
        
  Release-Deploy:
    needs: DAST
    runs-on: ubuntu-latest
    steps:
    - name: Upload Latest Image To Docker
      run: sleep 20;  
